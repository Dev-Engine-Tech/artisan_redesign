import 'package:firebase_core/firebase_core.dart';
import 'package:flutter/foundation.dart';

/// Secure Firebase options using environment variables
/// This replaces the hardcoded API keys in firebase_options.dart
class DefaultFirebaseOptionsSecure {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      throw UnsupportedError(
        'DefaultFirebaseOptionsSecure have not been configured for web - '
        'you can reconfigure this by running the FlutterFire CLI again.',
      );
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        throw UnsupportedError(
          'DefaultFirebaseOptionsSecure have not been configured for macos - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.windows:
        throw UnsupportedError(
          'DefaultFirebaseOptionsSecure have not been configured for windows - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptionsSecure have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptionsSecure are not supported for this platform.',
        );
    }
  }

  static FirebaseOptions get android => FirebaseOptions(
        apiKey: _getEnvVar('FIREBASE_API_KEY_ANDROID'),
        appId: _getEnvVar('FIREBASE_APP_ID_ANDROID'),
        messagingSenderId: _getEnvVar('FIREBASE_MESSAGING_SENDER_ID'),
        projectId: _getEnvVar('FIREBASE_PROJECT_ID'),
        storageBucket: _getEnvVar('FIREBASE_STORAGE_BUCKET', required: false),
      );

  static FirebaseOptions get ios => FirebaseOptions(
        apiKey: _getEnvVar('FIREBASE_API_KEY_IOS'),
        appId: _getEnvVar('FIREBASE_APP_ID_IOS'),
        messagingSenderId: _getEnvVar('FIREBASE_MESSAGING_SENDER_ID'),
        projectId: _getEnvVar('FIREBASE_PROJECT_ID'),
        storageBucket: _getEnvVar('FIREBASE_STORAGE_BUCKET', required: false),
        iosClientId: _getEnvVar('FIREBASE_IOS_CLIENT_ID', required: false),
        iosBundleId: _getEnvVar('FIREBASE_IOS_BUNDLE_ID', required: false),
      );

  /// Helper to get environment variables with validation
  static String _getEnvVar(String key, {bool required = true}) {
    const fromEnvironment = String.fromEnvironment;
    final value = fromEnvironment(key, defaultValue: '');
    
    if (required && (value.isEmpty || value == 'your_${key.toLowerCase()}_here')) {
      throw Exception(
        'Missing required Firebase configuration: $key. '
        'Please set this environment variable with your actual Firebase API key.'
      );
    }
    
    return value;
  }
}